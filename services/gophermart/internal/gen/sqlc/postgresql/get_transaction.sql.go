// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_transaction.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getTransactionsByUserID = `-- name: GetTransactionsByUserID :many
SELECT
    id,
    order_number,
    sum,
    processed_at
FROM transactions
WHERE user_id = $1 AND operation = $2::VARCHAR(16)
ORDER BY id DESC
OFFSET $3::INTEGER
LIMIT $4::INTEGER
`

type GetTransactionsByUserIDParams struct {
	UserId    uuid.UUID
	Operation string
	Offset    pgtype.Int4
	Limit     pgtype.Int4
}

type GetTransactionsByUserIDRow struct {
	Id          int32
	OrderNumber string
	Sum         pgtype.Numeric
	ProcessedAt time.Time
}

func (q *Queries) GetTransactionsByUserID(ctx context.Context, arg GetTransactionsByUserIDParams) ([]GetTransactionsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getTransactionsByUserID,
		arg.UserId,
		arg.Operation,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsByUserIDRow
	for rows.Next() {
		var i GetTransactionsByUserIDRow
		if err := rows.Scan(
			&i.Id,
			&i.OrderNumber,
			&i.Sum,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
