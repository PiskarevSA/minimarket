// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: create_balance.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateBalance = `-- name: CreateOrUpdateBalance :exec
WITH balance_exists AS (
    SELECT EXISTS (
        SELECT 1
        FROM balances
        WHERE user_id = $1
    ) AS exists_flag
)
INSERT INTO balances (
    user_id,
    current,
    withdrawn
)
SELECT
    $1 AS user_id,
    CASE
    WHEN $2::VARCHAR(16) = 'DEPOSIT' THEN $3
    ELSE (
        CASE
            WHEN (SELECT exists_flag FROM balance_exists) THEN 0
            ELSE -1
        END
    )
    END AS current,
    CASE
        WHEN $2 = 'WITHDRAW' THEN $3
        ELSE 0
    END AS withdrawn
ON CONFLICT (user_id) DO UPDATE
SET
    current = balances.current + (
    CASE
        WHEN $2 = 'DEPOSIT' THEN $3
        ELSE -($3)
    END
    ),
    withdrawn = balances.withdrawn + (
    CASE
        WHEN $2 = 'WITHDRAW' THEN $3
        ELSE 0
    END
    )
`

type CreateOrUpdateBalanceParams struct {
	UserId    uuid.UUID
	Operation string
	Sum       pgtype.Numeric
}

func (q *Queries) CreateOrUpdateBalance(ctx context.Context, arg CreateOrUpdateBalanceParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateBalance, arg.UserId, arg.Operation, arg.Sum)
	return err
}
