// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: create_order.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
WITH insertion AS (
    INSERT INTO orders (
        number,
        user_id,
        status,
        accrual,
        uploaded_at
    ) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    ON CONFLICT (number) DO NOTHING
    RETURNING user_id, TRUE AS inserted
)
SELECT
  user_id,
  inserted
FROM insertion
UNION ALL
SELECT
  o.user_id,
  FALSE AS inserted
FROM orders o
WHERE o.number = $1
  AND NOT EXISTS (SELECT 1 FROM insertion)
`

type CreateOrderParams struct {
	Number     string
	UserId     uuid.UUID
	Status     string
	Accrual    pgtype.Numeric
	UploadedAt time.Time
}

type CreateOrderRow struct {
	UserId   uuid.UUID
	Inserted bool
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (CreateOrderRow, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.Number,
		arg.UserId,
		arg.Status,
		arg.Accrual,
		arg.UploadedAt,
	)
	var i CreateOrderRow
	err := row.Scan(&i.UserId, &i.Inserted)
	return i, err
}
