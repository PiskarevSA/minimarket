// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_order.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getOrderByNumber = `-- name: GetOrderByNumber :one
SELECT 
    user_id, 
    status, 
    accrual, 
    uploaded_at
FROM orders
WHERE number = $1
`

type GetOrderByNumberRow struct {
	UserId     uuid.UUID
	Status     string
	Accrual    pgtype.Numeric
	UploadedAt time.Time
}

func (q *Queries) GetOrderByNumber(ctx context.Context, number string) (GetOrderByNumberRow, error) {
	row := q.db.QueryRow(ctx, getOrderByNumber, number)
	var i GetOrderByNumberRow
	err := row.Scan(
		&i.UserId,
		&i.Status,
		&i.Accrual,
		&i.UploadedAt,
	)
	return i, err
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT 
    number, 
    status, 
    accrual, 
    uploaded_at
FROM orders
WHERE user_id = $1
ORDER BY uploaded_at DESC
OFFSET $2::INTEGER
LIMIT $3::INTEGER
`

type GetOrdersByUserIDParams struct {
	UserId uuid.UUID
	Offset pgtype.Int4
	Limit  pgtype.Int4
}

type GetOrdersByUserIDRow struct {
	Number     string
	Status     string
	Accrual    pgtype.Numeric
	UploadedAt time.Time
}

func (q *Queries) GetOrdersByUserID(ctx context.Context, arg GetOrdersByUserIDParams) ([]GetOrdersByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserID, arg.UserId, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersByUserIDRow
	for rows.Next() {
		var i GetOrdersByUserIDRow
		if err := rows.Scan(
			&i.Number,
			&i.Status,
			&i.Accrual,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
