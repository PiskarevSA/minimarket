// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	json "github.com/bytedance/sonic"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for InsufficientPointsCode.
const (
	U1688 InsufficientPointsCode = "U1688"
)

// Defines values for InsufficientPointsMessage.
const (
	InsufficientPointsOnAccount InsufficientPointsMessage = "insufficient points on account"
)

// Defines values for InternalServerErrorCode.
const (
	S1394 InternalServerErrorCode = "S1394"
)

// Defines values for InternalServerErrorMessage.
const (
	InternalServerError InternalServerErrorMessage = "internal server error"
)

// Defines values for InvalidOrderNumberCode.
const (
	U1062 InvalidOrderNumberCode = "U1062"
)

// Defines values for InvalidOrderNumberMessage.
const (
	InvalidOrderNumber InvalidOrderNumberMessage = "invalid order number"
)

// Defines values for UserUnauthenticatedCode.
const (
	U1527 UserUnauthenticatedCode = "U1527"
)

// Defines values for UserUnauthenticatedMessage.
const (
	UserUnauthenticated UserUnauthenticatedMessage = "user unauthenticated"
)

// Balance defines model for Balance.
type Balance struct {
	// Current Current loyalty points balance
	Current float32 `json:"current"`

	// Withdrawn Total points withdrawn during account lifetime
	Withdrawn float32 `json:"withdrawn"`
}

// InsufficientPointsResponse defines model for InsufficientPoints.
type InsufficientPointsResponse struct {
	Code    InsufficientPointsCode    `json:"code"`
	Message InsufficientPointsMessage `json:"message"`
}

// InsufficientPointsCode defines model for InsufficientPoints.Code.
type InsufficientPointsCode string

// InsufficientPointsMessage defines model for InsufficientPoints.Message.
type InsufficientPointsMessage string

// InternalServerErrorResponse defines model for InternalServerError.
type InternalServerErrorResponse struct {
	Code    InternalServerErrorCode    `json:"code"`
	Message InternalServerErrorMessage `json:"message"`
}

// InternalServerErrorCode defines model for InternalServerError.Code.
type InternalServerErrorCode string

// InternalServerErrorMessage defines model for InternalServerError.Message.
type InternalServerErrorMessage string

// InvalidOrderNumberResponse defines model for InvalidOrderNumber.
type InvalidOrderNumberResponse struct {
	Code    InvalidOrderNumberCode    `json:"code"`
	Message InvalidOrderNumberMessage `json:"message"`
}

// InvalidOrderNumberCode defines model for InvalidOrderNumber.Code.
type InvalidOrderNumberCode string

// InvalidOrderNumberMessage defines model for InvalidOrderNumber.Message.
type InvalidOrderNumberMessage string

// UserUnauthenticatedResponse defines model for UserUnauthenticated.
type UserUnauthenticatedResponse struct {
	Code    UserUnauthenticatedCode    `json:"code"`
	Message UserUnauthenticatedMessage `json:"message"`
}

// UserUnauthenticatedCode defines model for UserUnauthenticated.Code.
type UserUnauthenticatedCode string

// UserUnauthenticatedMessage defines model for UserUnauthenticated.Message.
type UserUnauthenticatedMessage string

// Withdraw defines model for Withdraw.
type Withdraw struct {
	// Order Order number for which points are withdrawn
	Order string `json:"order" validate:"required"`

	// Sum Amount of points to withdraw
	Sum float32 `json:"sum" validate:"required, min=1"`
}

// PointsWithdrawJSONRequestBody defines body for PointsWithdraw for application/json ContentType.
type PointsWithdrawJSONRequestBody = Withdraw

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/user/points)
	PointsBalance(w http.ResponseWriter, r *http.Request)

	// (POST /api/user/points/withdraw)
	PointsWithdraw(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /api/user/points)
func (_ Unimplemented) PointsBalance(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/user/points/withdraw)
func (_ Unimplemented) PointsWithdraw(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PointsBalance operation middleware
func (siw *ServerInterfaceWrapper) PointsBalance(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PointsBalance(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PointsWithdraw operation middleware
func (siw *ServerInterfaceWrapper) PointsWithdraw(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PointsWithdraw(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/points", wrapper.PointsBalance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/points/withdraw", wrapper.PointsWithdraw)
	})

	return r
}

type PointsBalanceRequestObject struct {
}

type PointsBalanceResponseObject interface {
	VisitPointsBalanceResponse(w http.ResponseWriter) error
}

type PointsBalance200JSONResponse Balance

func (response PointsBalance200JSONResponse) VisitPointsBalanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type PointsBalance401JSONResponse UserUnauthenticatedResponse

func (response PointsBalance401JSONResponse) VisitPointsBalanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type PointsBalance500JSONResponse InternalServerErrorResponse

func (response PointsBalance500JSONResponse) VisitPointsBalanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type PointsWithdrawRequestObject struct {
	Body *PointsWithdrawJSONRequestBody
}

type PointsWithdrawResponseObject interface {
	VisitPointsWithdrawResponse(w http.ResponseWriter) error
}

type PointsWithdraw200Response struct {
}

func (response PointsWithdraw200Response) VisitPointsWithdrawResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PointsWithdraw402JSONResponse InsufficientPointsResponse

func (response PointsWithdraw402JSONResponse) VisitPointsWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(402)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type PointsWithdraw422JSONResponse InvalidOrderNumberResponse

func (response PointsWithdraw422JSONResponse) VisitPointsWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type PointsWithdraw500JSONResponse InternalServerErrorResponse

func (response PointsWithdraw500JSONResponse) VisitPointsWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/user/points)
	PointsBalance(ctx context.Context, request PointsBalanceRequestObject) (PointsBalanceResponseObject, error)

	// (POST /api/user/points/withdraw)
	PointsWithdraw(ctx context.Context, request PointsWithdrawRequestObject) (PointsWithdrawResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PointsBalance operation middleware
func (sh *strictHandler) PointsBalance(w http.ResponseWriter, r *http.Request) {
	var request PointsBalanceRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PointsBalance(ctx, request.(PointsBalanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PointsBalance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PointsBalanceResponseObject); ok {
		if err := validResponse.VisitPointsBalanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PointsWithdraw operation middleware
func (sh *strictHandler) PointsWithdraw(w http.ResponseWriter, r *http.Request) {
	var request PointsWithdrawRequestObject

	var body PointsWithdrawJSONRequestBody
	if err := json.ConfigDefault.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PointsWithdraw(ctx, request.(PointsWithdrawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PointsWithdraw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PointsWithdrawResponseObject); ok {
		if err := validResponse.VisitPointsWithdrawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXXU/jRhf+K6PzvpcGJ4YAtVSpsGolth+gzSIuEKoG+ziZxZ6ZzowJEcp/r874M7a7",
	"UClXvXM8nuc8z/nOGySq0EqidBbiN7DJGgvuH694zmWC9KiN0micQH+QlMagdPSYok2M0E4oCTF8qg5Y",
	"rrY8d1umlZDOsqcaKAB85YXOEeLFbHa8CCBTpuAOYshyxR0E4LYaIQZZFk9oYBfARrh1avhGjq19VY7n",
	"jY32O5aWRsgV40miSuIiMnSi2LN+Gr1veheAwb9KYTCF+KHV3Gf02F5ST98wccT3Wtoyy0QiULpbT23C",
	"fyr1XkVZFoR9Nz+7uOihWUcKCK1Aa/lq72PRM9CIV7KRO4EyFELGO+SRhgBej1bqSPKCXo7lfEGrlbRY",
	"iXVoJM+XaF7Q/GyMMu+rXc5Pfjj9uNrKArPeBENv4+AiRzL2Vb7wXKQ3JkXzR5UdHwjp7Cz6uEhvgCmy",
	"wOoEPLjGoYi+xDuL5k7y0q1ROpFwRybe17iIzj+qsbRoWDkwcWCNEyr6Iu/rwh0r844fN5ibXjxYpgzb",
	"rEWyboqOG+y6Tr+7QHRyfh5Fi7PoFIYCibDiWhyRshXKI3x1hh85vvJEfIy4owutG8gnlpw4pHdZ+Aan",
	"soaRUy2hPp/zxTyAQkhREMp82On+PaWAFUL+OIfdMFyVHyu64+ZIOjApjXDbJU2ZyvdPyA2ay9Ktu1+/",
	"NL358/1XgvNfQ1yfdk5dO6cpsolSzwIbDEHOqV5BAHVu8CRBa/906hllB8C1+BW3lRAhM1WluXQ88dMN",
	"Cy5yiCvncfOM7ieeFkIeJ6rooH9vT9nN5+UnCKA0ec3OxmG4Em5dPtGd8FbYZ27wZXkZdpikYBDZXgoz",
	"qhxiLFzeJDmjD6pzoSS7vL2GAF7Q2Or6/Hh2PCNUpVFyLSCGE/8qAM3d2rs95FqEBB3qdkqtcGKmf0Fn",
	"BL5UPP55slM5eTbXKcRQjYqr9tTUZejNRLNZ4+d6i+Ba57WY8JtVsltE6On/BjOI4X9ht6mE9ZoSNiZ8",
	"BPeJL0sf8qzMmak08JyKpeG8C+B0Nj8Yk6kWOsHKh0/YUSvcBbA4oF+mJvMEm+vJ8dqvVIgf9mv04XEX",
	"vO1V3MPjjord94uHOvTwSCDDJAs3/Ras7ES6NU16mGnUfjmTuGFNk5nKuPuu/VFfQuuuVLo9mFdb+AlX",
	"7g0LLlPGv9+eu77pTIm76RqZ9g2njPbqmDaKkhxTZtt0z7dVbkcHzKbRUjuZTN/dTIlTdEhOo61sktN4",
	"tWL16v8fLDmPQrDWg+xb/k0lnVmqJ4fW0V8lXRqtKPGGk2sendPcOJ7HF7TM9Gy+NcOvSYfH3d8BAAD/",
	"/+dJmyRKDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
