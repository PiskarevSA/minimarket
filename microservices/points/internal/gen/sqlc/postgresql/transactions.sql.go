// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
WITH next_tx_id AS (
    INSERT INTO transactions_counter (
        user_id,
        counter
    )
    VALUES (
        $2::UUID,
        1
    )
    ON CONFLICT (user_id) DO UPDATE
    SET counter = transactions_counter.counter + 1
    RETURNING counter AS id
)
INSERT INTO transactions (
    id,
    order_id,
    user_id,
    operation,
    amount
)
SELECT
    next_tx_id.id,
    $1::UUID,
    $2,
    $3::VARCHAR(16),
    $4::DECIMAL
FROM next_tx_id
`

type CreateTransactionParams struct {
	OrderId   uuid.UUID
	UserId    uuid.UUID
	Operation string
	Amount    pgtype.Numeric
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.OrderId,
		arg.UserId,
		arg.Operation,
		arg.Amount,
	)
	return err
}

const getTransactions = `-- name: GetTransactions :many
SELECT
    id,
    order_id,
    user_id,
    operation,
    amount,
    timestamp
FROM transactions
WHERE user_id = $1::UUID
ORDER BY id DESC
OFFSET $2::INTEGER
LIMIT $3::INTEGER
`

type GetTransactionsParams struct {
	UserId uuid.UUID
	Offset pgtype.Int4
	Limit  pgtype.Int4
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactions, arg.UserId, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.Id,
			&i.OrderId,
			&i.UserId,
			&i.Operation,
			&i.Amount,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
