// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: balances.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateBalance = `-- name: CreateOrUpdateBalance :exec
WITH balance_exists AS (
    SELECT EXISTS (
        SELECT 1
        FROM balances
        WHERE user_id = $1::UUID
    ) AS exists_flag
)
INSERT INTO balances (
    user_id,
    available,
    withdrawn
)
SELECT 
    user_id, 
    available, 
    withdrawn
FROM (
    SELECT
        $1::UUID AS user_id,
        CASE
            WHEN $2::VARCHAR(16) = 'DEPOSIT' THEN $3::DECIMAL
            ELSE
                CASE
                    WHEN (SELECT exists_flag FROM balance_exists) THEN 0
                    ELSE -1
                END
        END AS available,
        CASE
            WHEN $2 = 'WITHDRAW' THEN $3
            ELSE 0
        END AS withdrawn
)
ON CONFLICT (user_id) DO UPDATE
SET
    available = balances.available +
        CASE
            WHEN $2 = 'DEPOSIT' THEN $3
            ELSE -($3)
        END,
    withdrawn = balances.withdrawn +
        CASE
            WHEN $2 = 'DEPOSIT' THEN 0
            ELSE $3
        END
`

type CreateOrUpdateBalanceParams struct {
	UserId    uuid.UUID
	Operation string
	Amount    pgtype.Numeric
}

func (q *Queries) CreateOrUpdateBalance(ctx context.Context, arg CreateOrUpdateBalanceParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateBalance, arg.UserId, arg.Operation, arg.Amount)
	return err
}

const getBalance = `-- name: GetBalance :one
SELECT
    available,
    withdrawn,
    updated_at
FROM balances
WHERE user_id = $1::UUID
`

type GetBalanceRow struct {
	Available pgtype.Numeric
	Withdrawn pgtype.Numeric
	UpdatedAt time.Time
}

func (q *Queries) GetBalance(ctx context.Context, userID uuid.UUID) (GetBalanceRow, error) {
	row := q.db.QueryRow(ctx, getBalance, userID)
	var i GetBalanceRow
	err := row.Scan(&i.Available, &i.Withdrawn, &i.UpdatedAt)
	return i, err
}
