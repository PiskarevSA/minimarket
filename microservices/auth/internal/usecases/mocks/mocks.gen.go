// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/PiskarevSA/minimarket/microservices/auth/internal/storage"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserStorage creates a new instance of MockUserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStorage {
	mock := &MockUserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserStorage is an autogenerated mock type for the UserStorage type
type MockUserStorage struct {
	mock.Mock
}

type MockUserStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStorage) EXPECT() *MockUserStorage_Expecter {
	return &MockUserStorage_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserStorage
func (_mock *MockUserStorage) CreateUser(ctx context.Context, userId uuid.UUID, login string, passwordHash string) error {
	ret := _mock.Called(ctx, userId, login, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = returnFunc(ctx, userId, login, passwordHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - userId
//   - login
//   - passwordHash
func (_e *MockUserStorage_Expecter) CreateUser(ctx interface{}, userId interface{}, login interface{}, passwordHash interface{}) *MockUserStorage_CreateUser_Call {
	return &MockUserStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, userId, login, passwordHash)}
}

func (_c *MockUserStorage_CreateUser_Call) Run(run func(ctx context.Context, userId uuid.UUID, login string, passwordHash string)) *MockUserStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserStorage_CreateUser_Call) Return(err error) *MockUserStorage_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserStorage_CreateUser_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID, login string, passwordHash string) error) *MockUserStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCreds provides a mock function for the type MockUserStorage
func (_mock *MockUserStorage) GetUserCreds(ctx context.Context, login string) (*storage.UserCreds, error) {
	ret := _mock.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCreds")
	}

	var r0 *storage.UserCreds
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*storage.UserCreds, error)); ok {
		return returnFunc(ctx, login)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *storage.UserCreds); ok {
		r0 = returnFunc(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.UserCreds)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, login)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStorage_GetUserCreds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCreds'
type MockUserStorage_GetUserCreds_Call struct {
	*mock.Call
}

// GetUserCreds is a helper method to define mock.On call
//   - ctx
//   - login
func (_e *MockUserStorage_Expecter) GetUserCreds(ctx interface{}, login interface{}) *MockUserStorage_GetUserCreds_Call {
	return &MockUserStorage_GetUserCreds_Call{Call: _e.mock.On("GetUserCreds", ctx, login)}
}

func (_c *MockUserStorage_GetUserCreds_Call) Run(run func(ctx context.Context, login string)) *MockUserStorage_GetUserCreds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStorage_GetUserCreds_Call) Return(userCreds *storage.UserCreds, err error) *MockUserStorage_GetUserCreds_Call {
	_c.Call.Return(userCreds, err)
	return _c
}

func (_c *MockUserStorage_GetUserCreds_Call) RunAndReturn(run func(ctx context.Context, login string) (*storage.UserCreds, error)) *MockUserStorage_GetUserCreds_Call {
	_c.Call.Return(run)
	return _c
}
