// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package usecases

import (
	"context"
	"sync"

	"github.com/PiskarevSA/minimarket/microservices/auth/internal/storage"
	"github.com/google/uuid"
)

// Ensure that MockUserStorage does implement UserStorage.
// If this is not the case, regenerate this file with mockery.
var _ UserStorage = &MockUserStorage{}

// MockUserStorage is a mock implementation of UserStorage.
//
//	func TestSomethingThatUsesUserStorage(t *testing.T) {
//
//		// make and configure a mocked UserStorage
//		mockedUserStorage := &MockUserStorage{
//			CreateUserFunc: func(ctx context.Context, userId uuid.UUID, login string, passwordHash string) error {
//				panic("mock out the CreateUser method")
//			},
//			GetUserCredsFunc: func(ctx context.Context, login string) (*storage.UserCreds, error) {
//				panic("mock out the GetUserCreds method")
//			},
//		}
//
//		// use mockedUserStorage in code that requires UserStorage
//		// and then make assertions.
//
//	}
type MockUserStorage struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, userId uuid.UUID, login string, passwordHash string) error

	// GetUserCredsFunc mocks the GetUserCreds method.
	GetUserCredsFunc func(ctx context.Context, login string) (*storage.UserCreds, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserId is the userId argument value.
			UserId uuid.UUID
			// Login is the login argument value.
			Login string
			// PasswordHash is the passwordHash argument value.
			PasswordHash string
		}
		// GetUserCreds holds details about calls to the GetUserCreds method.
		GetUserCreds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
		}
	}
	lockCreateUser   sync.RWMutex
	lockGetUserCreds sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *MockUserStorage) CreateUser(ctx context.Context, userId uuid.UUID, login string, passwordHash string) error {
	if mock.CreateUserFunc == nil {
		panic("MockUserStorage.CreateUserFunc: method is nil but UserStorage.CreateUser was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		UserId       uuid.UUID
		Login        string
		PasswordHash string
	}{
		Ctx:          ctx,
		UserId:       userId,
		Login:        login,
		PasswordHash: passwordHash,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, userId, login, passwordHash)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserStorage.CreateUserCalls())
func (mock *MockUserStorage) CreateUserCalls() []struct {
	Ctx          context.Context
	UserId       uuid.UUID
	Login        string
	PasswordHash string
} {
	var calls []struct {
		Ctx          context.Context
		UserId       uuid.UUID
		Login        string
		PasswordHash string
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// GetUserCreds calls GetUserCredsFunc.
func (mock *MockUserStorage) GetUserCreds(ctx context.Context, login string) (*storage.UserCreds, error) {
	if mock.GetUserCredsFunc == nil {
		panic("MockUserStorage.GetUserCredsFunc: method is nil but UserStorage.GetUserCreds was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Login string
	}{
		Ctx:   ctx,
		Login: login,
	}
	mock.lockGetUserCreds.Lock()
	mock.calls.GetUserCreds = append(mock.calls.GetUserCreds, callInfo)
	mock.lockGetUserCreds.Unlock()
	return mock.GetUserCredsFunc(ctx, login)
}

// GetUserCredsCalls gets all the calls that were made to GetUserCreds.
// Check the length with:
//
//	len(mockedUserStorage.GetUserCredsCalls())
func (mock *MockUserStorage) GetUserCredsCalls() []struct {
	Ctx   context.Context
	Login string
} {
	var calls []struct {
		Ctx   context.Context
		Login string
	}
	mock.lockGetUserCreds.RLock()
	calls = mock.calls.GetUserCreds
	mock.lockGetUserCreds.RUnlock()
	return calls
}
