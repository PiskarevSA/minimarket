// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package oapiserver

import (
	"context"
	"sync"

	"github.com/PiskarevSA/minimarket/microservices/auth/internal/models"
)

// Ensure that MockUserRegisterUsecase does implement UserRegisterUsecase.
// If this is not the case, regenerate this file with mockery.
var _ UserRegisterUsecase = &MockUserRegisterUsecase{}

// MockUserRegisterUsecase is a mock implementation of UserRegisterUsecase.
//
//	func TestSomethingThatUsesUserRegisterUsecase(t *testing.T) {
//
//		// make and configure a mocked UserRegisterUsecase
//		mockedUserRegisterUsecase := &MockUserRegisterUsecase{
//			DoFunc: func(ctx context.Context, login string, password string) (*models.UserRegistered, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedUserRegisterUsecase in code that requires UserRegisterUsecase
//		// and then make assertions.
//
//	}
type MockUserRegisterUsecase struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, login string, password string) (*models.UserRegistered, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
			// Password is the password argument value.
			Password string
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *MockUserRegisterUsecase) Do(ctx context.Context, login string, password string) (*models.UserRegistered, error) {
	if mock.DoFunc == nil {
		panic("MockUserRegisterUsecase.DoFunc: method is nil but UserRegisterUsecase.Do was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Login    string
		Password string
	}{
		Ctx:      ctx,
		Login:    login,
		Password: password,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, login, password)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedUserRegisterUsecase.DoCalls())
func (mock *MockUserRegisterUsecase) DoCalls() []struct {
	Ctx      context.Context
	Login    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Login    string
		Password string
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Ensure that MockUserLogInUsecase does implement UserLogInUsecase.
// If this is not the case, regenerate this file with mockery.
var _ UserLogInUsecase = &MockUserLogInUsecase{}

// MockUserLogInUsecase is a mock implementation of UserLogInUsecase.
//
//	func TestSomethingThatUsesUserLogInUsecase(t *testing.T) {
//
//		// make and configure a mocked UserLogInUsecase
//		mockedUserLogInUsecase := &MockUserLogInUsecase{
//			DoFunc: func(ctx context.Context, login string, password string) (*models.UserLoggedIn, error) {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedUserLogInUsecase in code that requires UserLogInUsecase
//		// and then make assertions.
//
//	}
type MockUserLogInUsecase struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, login string, password string) (*models.UserLoggedIn, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
			// Password is the password argument value.
			Password string
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *MockUserLogInUsecase) Do(ctx context.Context, login string, password string) (*models.UserLoggedIn, error) {
	if mock.DoFunc == nil {
		panic("MockUserLogInUsecase.DoFunc: method is nil but UserLogInUsecase.Do was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Login    string
		Password string
	}{
		Ctx:      ctx,
		Login:    login,
		Password: password,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, login, password)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedUserLogInUsecase.DoCalls())
func (mock *MockUserLogInUsecase) DoCalls() []struct {
	Ctx      context.Context
	Login    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Login    string
		Password string
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
