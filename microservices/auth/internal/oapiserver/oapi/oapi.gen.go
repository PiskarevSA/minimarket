// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	json "github.com/bytedance/sonic"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for InternalServerErrorCode.
const (
	S1394 InternalServerErrorCode = "S1394"
)

// Defines values for InternalServerErrorMessage.
const (
	InternalServerError InternalServerErrorMessage = "internal server error"
)

// Defines values for InvalidLoginOrPasswordCode.
const (
	U1385 InvalidLoginOrPasswordCode = "U1385"
)

// Defines values for InvalidLoginOrPasswordMessage.
const (
	InvalidLoginOrPassword InvalidLoginOrPasswordMessage = "invalid login or password"
)

// Defines values for InvalidPayloadFormatCode.
const (
	U1402 InvalidPayloadFormatCode = "U1402"
)

// Defines values for InvalidPayloadFormatMessage.
const (
	InvalidPayloadFormat InvalidPayloadFormatMessage = "invalid payload format"
)

// Defines values for LoginConflictCode.
const (
	U1956 LoginConflictCode = "U1956"
)

// Defines values for LoginConflictMessage.
const (
	LoginAlreadyInUse LoginConflictMessage = "login already in use"
)

// Authenticated defines model for Authenticated.
type Authenticated struct {
	AccessToken  string `json:"accessToken" validate:"required"`
	Id           string `json:"id" validate:"required"`
	Login        string `json:"login" validate:"required, min=5,max=32"`
	RefreshToken string `json:"refreshToken" validate:"required"`
}

// InternalServerErrorResponse defines model for InternalServerError.
type InternalServerErrorResponse struct {
	Code    InternalServerErrorCode    `json:"code"`
	Message InternalServerErrorMessage `json:"message"`
}

// InternalServerErrorCode defines model for InternalServerError.Code.
type InternalServerErrorCode string

// InternalServerErrorMessage defines model for InternalServerError.Message.
type InternalServerErrorMessage string

// InvalidLoginOrPasswordResponse defines model for InvalidLoginOrPassword.
type InvalidLoginOrPasswordResponse struct {
	Code    InvalidLoginOrPasswordCode    `json:"code"`
	Message InvalidLoginOrPasswordMessage `json:"message"`
}

// InvalidLoginOrPasswordCode defines model for InvalidLoginOrPassword.Code.
type InvalidLoginOrPasswordCode string

// InvalidLoginOrPasswordMessage defines model for InvalidLoginOrPassword.Message.
type InvalidLoginOrPasswordMessage string

// InvalidPayloadFormatResponse defines model for InvalidPayloadFormat.
type InvalidPayloadFormatResponse struct {
	Code    InvalidPayloadFormatCode    `json:"code"`
	Message InvalidPayloadFormatMessage `json:"message"`
}

// InvalidPayloadFormatCode defines model for InvalidPayloadFormat.Code.
type InvalidPayloadFormatCode string

// InvalidPayloadFormatMessage defines model for InvalidPayloadFormat.Message.
type InvalidPayloadFormatMessage string

// Login defines model for Login.
type Login struct {
	Login    string `json:"login" validate:"required, min=5,max=32"`
	Password string `json:"password" validate:"required, min=8,max=32"`
}

// LoginConflictResponse defines model for LoginConflict.
type LoginConflictResponse struct {
	Code    LoginConflictCode    `json:"code"`
	Message LoginConflictMessage `json:"message"`
}

// LoginConflictCode defines model for LoginConflict.Code.
type LoginConflictCode string

// LoginConflictMessage defines model for LoginConflict.Message.
type LoginConflictMessage string

// UserLogInJSONRequestBody defines body for UserLogIn for application/json ContentType.
type UserLogInJSONRequestBody = Login

// UserRegisterJSONRequestBody defines body for UserRegister for application/json ContentType.
type UserRegisterJSONRequestBody = Login

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/user/login)
	UserLogIn(w http.ResponseWriter, r *http.Request)

	// (POST /api/user/register)
	UserRegister(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /api/user/login)
func (_ Unimplemented) UserLogIn(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/user/register)
func (_ Unimplemented) UserRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UserLogIn operation middleware
func (siw *ServerInterfaceWrapper) UserLogIn(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLogIn(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/login", wrapper.UserLogIn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/register", wrapper.UserRegister)
	})

	return r
}

type UserLogInRequestObject struct {
	Body *UserLogInJSONRequestBody
}

type UserLogInResponseObject interface {
	VisitUserLogInResponse(w http.ResponseWriter) error
}

type UserLogIn200JSONResponse Authenticated

func (response UserLogIn200JSONResponse) VisitUserLogInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type UserLogIn400JSONResponse InvalidPayloadFormatResponse

func (response UserLogIn400JSONResponse) VisitUserLogInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type UserLogIn401JSONResponse InvalidLoginOrPasswordResponse

func (response UserLogIn401JSONResponse) VisitUserLogInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type UserLogIn500JSONResponse InternalServerErrorResponse

func (response UserLogIn500JSONResponse) VisitUserLogInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type UserRegisterRequestObject struct {
	Body *UserRegisterJSONRequestBody
}

type UserRegisterResponseObject interface {
	VisitUserRegisterResponse(w http.ResponseWriter) error
}

type UserRegister200JSONResponse Authenticated

func (response UserRegister200JSONResponse) VisitUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type UserRegister400JSONResponse InvalidPayloadFormatResponse

func (response UserRegister400JSONResponse) VisitUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type UserRegister409JSONResponse LoginConflictResponse

func (response UserRegister409JSONResponse) VisitUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

type UserRegister500JSONResponse InternalServerErrorResponse

func (response UserRegister500JSONResponse) VisitUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.ConfigDefault.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/user/login)
	UserLogIn(ctx context.Context, request UserLogInRequestObject) (UserLogInResponseObject, error)

	// (POST /api/user/register)
	UserRegister(ctx context.Context, request UserRegisterRequestObject) (UserRegisterResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// UserLogIn operation middleware
func (sh *strictHandler) UserLogIn(w http.ResponseWriter, r *http.Request) {
	var request UserLogInRequestObject

	var body UserLogInJSONRequestBody
	if err := json.ConfigDefault.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserLogIn(ctx, request.(UserLogInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserLogIn")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserLogInResponseObject); ok {
		if err := validResponse.VisitUserLogInResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserRegister operation middleware
func (sh *strictHandler) UserRegister(w http.ResponseWriter, r *http.Request) {
	var request UserRegisterRequestObject

	var body UserRegisterJSONRequestBody
	if err := json.ConfigDefault.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UserRegister(ctx, request.(UserRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UserRegisterResponseObject); ok {
		if err := validResponse.VisitUserRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yWXW/iOBfHv0rk57kMJBDSaSONNN3ui1K1U1Sm+6JRL0x8CC6J7bGdFqbiu6/sJIRA",
	"pkNHjNSLvQPHPuf3Py8+fkYJzwVnwLRC0TNSyRxybH+eF3oOTNMEayBmQUguQGoK9jNOElDqE18AM39h",
	"iXORAYoQrC7n0z8SekMv47uv8eAjjVXMbsPkIj6JF+LvPy8uz/qwuvxK/orpDY2X1w/X/sdP/wQ3vy6e",
	"Yub3SZHnK20Nu0ivhDGqtKQsRS5a9lLeYzg3i+dbCOYLx4L2Ek4gBdaDpZa4p3FqaR9xRgnW5pSELwWV",
	"QNB67SJK2vDDsyE+mY4GvTD0Z71RQMLeFAej3ij0p/7MP5kF+N13qGLyozAZT+lOMB/4nBEOyEU5Xl4B",
	"S/UcRcHQRTll9d+wi+d17l0np+x96OZ4+T4YWhgJMwlq/tMSXNk/JM+32yg/FFurp/oXfTZZr6Pttgp5",
	"R/b9hotPHyDRaO2imGmQDGcTkI8gf5OSy/3mMGw2aKzIjcPJIDgbbZmrZK5dlINSOG1tppUHR1kXDlgf",
	"+4d3RFmfjcE99p0q3ZdxC0pwpqBUaQN5ZWJ0I8dYqScuyfeF3g2C0/BwodaJYzPhcOmI2s/RxXap6dA7",
	"xquMY/I7lznWh6gd+cPXqhWlD2dWOvk5UltCtoVe1XdMW9mbunrEVrk1PJMgKWQw/qDUky9NA1cBjJr9",
	"L6GeHgv1tEHdyVR9o3SUcXN/2ARccDbLaHJQiZ2FJ4eWWNlIOJOAycqhzCkUHLvAWvxNZdlhyma81MA0",
	"LsVBjmmGIpMImmO5AP0Bk5yyfsJz5KLK5vXmq3NzOblALiqkOTXXWqjI81Kq58XUnPHGVC2whMfJudfY",
	"NOEgoBJJhaacmafB1uPFREGaEUO1LaQ7BdIxG8rvlDPnfBwjFz2CVOXxQd/v+8YqF8CwoChCgV0yydVz",
	"mykPC+oZ096meQRXVvULLLimMUm3zmNSMV3xNC5H0JcClP6Fk1UdTWDWLhYiq5C9B8VZ82Izv/4vYYYi",
	"9D+vedJ51XvOK9veZqkNZ4ORSCCGEGfKXEuOhJQqXeKh7WLRsgBbPWXabRyGvn80zPab81u4qrAje1Zk",
	"2crB7SMuGh2Rp3MsdGDF3Xe7pRkcm2Z3KL/Asz9Z1y4Kjxqg/ddQJ0/Xk8bsK6/bzzax6N6sNH1VliHI",
	"b7fWbbXDwQ6DJ9taDmakVRSdvVYf/K/dXtludU6A7AX6TXbf2XFzuhncHRhXXdP3rffb2kXlHrP6vKco",
	"aWyYStWgNGWpIwopuCnI7Ukded5g+M6Myf4gOh2dDND6fuPwuZ711vH6fv1vAAAA//9KR+z1ehAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
