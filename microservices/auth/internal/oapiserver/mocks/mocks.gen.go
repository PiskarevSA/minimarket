// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/PiskarevSA/minimarket/microservices/auth/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRegisterUsecase creates a new instance of MockUserRegisterUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRegisterUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRegisterUsecase {
	mock := &MockUserRegisterUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRegisterUsecase is an autogenerated mock type for the UserRegisterUsecase type
type MockUserRegisterUsecase struct {
	mock.Mock
}

type MockUserRegisterUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRegisterUsecase) EXPECT() *MockUserRegisterUsecase_Expecter {
	return &MockUserRegisterUsecase_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockUserRegisterUsecase
func (_mock *MockUserRegisterUsecase) Do(ctx context.Context, login string, password string) (*models.UserRegistered, error) {
	ret := _mock.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *models.UserRegistered
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*models.UserRegistered, error)); ok {
		return returnFunc(ctx, login, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *models.UserRegistered); ok {
		r0 = returnFunc(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserRegistered)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRegisterUsecase_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockUserRegisterUsecase_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx
//   - login
//   - password
func (_e *MockUserRegisterUsecase_Expecter) Do(ctx interface{}, login interface{}, password interface{}) *MockUserRegisterUsecase_Do_Call {
	return &MockUserRegisterUsecase_Do_Call{Call: _e.mock.On("Do", ctx, login, password)}
}

func (_c *MockUserRegisterUsecase_Do_Call) Run(run func(ctx context.Context, login string, password string)) *MockUserRegisterUsecase_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRegisterUsecase_Do_Call) Return(userRegistered *models.UserRegistered, err error) *MockUserRegisterUsecase_Do_Call {
	_c.Call.Return(userRegistered, err)
	return _c
}

func (_c *MockUserRegisterUsecase_Do_Call) RunAndReturn(run func(ctx context.Context, login string, password string) (*models.UserRegistered, error)) *MockUserRegisterUsecase_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserLogInUsecase creates a new instance of MockUserLogInUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserLogInUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserLogInUsecase {
	mock := &MockUserLogInUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserLogInUsecase is an autogenerated mock type for the UserLogInUsecase type
type MockUserLogInUsecase struct {
	mock.Mock
}

type MockUserLogInUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserLogInUsecase) EXPECT() *MockUserLogInUsecase_Expecter {
	return &MockUserLogInUsecase_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockUserLogInUsecase
func (_mock *MockUserLogInUsecase) Do(ctx context.Context, login string, password string) (*models.UserLoggedIn, error) {
	ret := _mock.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *models.UserLoggedIn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*models.UserLoggedIn, error)); ok {
		return returnFunc(ctx, login, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *models.UserLoggedIn); ok {
		r0 = returnFunc(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserLoggedIn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserLogInUsecase_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockUserLogInUsecase_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx
//   - login
//   - password
func (_e *MockUserLogInUsecase_Expecter) Do(ctx interface{}, login interface{}, password interface{}) *MockUserLogInUsecase_Do_Call {
	return &MockUserLogInUsecase_Do_Call{Call: _e.mock.On("Do", ctx, login, password)}
}

func (_c *MockUserLogInUsecase_Do_Call) Run(run func(ctx context.Context, login string, password string)) *MockUserLogInUsecase_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserLogInUsecase_Do_Call) Return(userLoggedIn *models.UserLoggedIn, err error) *MockUserLogInUsecase_Do_Call {
	_c.Call.Return(userLoggedIn, err)
	return _c
}

func (_c *MockUserLogInUsecase_Do_Call) RunAndReturn(run func(ctx context.Context, login string, password string) (*models.UserLoggedIn, error)) *MockUserLogInUsecase_Do_Call {
	_c.Call.Return(run)
	return _c
}
